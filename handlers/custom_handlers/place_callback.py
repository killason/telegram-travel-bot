from loader import bot
from telebot.types import CallbackQuery
from utils.user_context import set_context, get_context
from services.places_service import get_place_details
from utils.place_output import send_places_chunk
from services.places_service import search_all_places
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import InputMediaPhoto
from services.history_service import save_view_place


@bot.callback_query_handler(func=lambda call: call.data == "category_food")
def handle_places_food(call: CallbackQuery):
    """"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï–¥–∞" –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Å—Ç."""
    user_id = call.from_user.id
    context = get_context(user_id)

    lat = context.get("lat")
    lon = context.get("lon")

    if lat is None or lon is None:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å –≥–æ—Ä–æ–¥ –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    all_places = search_all_places(query="", lat=lat, lon=lon, place_type="restaurant")

    if not all_places:
        bot.send_message(call.message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∏ offset = 0
    set_context(user_id, lat=lat, lon=lon, place_type="restaurant", offset=0, places=all_places)

    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
    send_places_chunk(chat_id=call.message.chat.id, user_id=user_id)
    

@bot.callback_query_handler(func=lambda call: call.data.startswith("details_"))
def handle_place_details(call: CallbackQuery):
    raw = call.data.split("details_")[1]
    try:
        place_id, suffix = raw.rsplit("_", 1)
    except ValueError:
        place_id = raw
        suffix = "mid"

    details = get_place_details(place_id)
    if not details:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    save_view_place(
    user_id=call.from_user.id,
    place_type=", ".join(details['types']) if details.get('types') else None,
    name=details['name'],
    address=details['address'],
    link=details.get('maps_link') or ""
)

    text = f"üìç <b>{details['name']}</b>\n"
    text += f"{details['address']}\n"
    text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {details['rating']}\n"
    if details["phone"]:
        text += f"üìû {details['phone']}\n"
    if details["website"]:
        text += f"üåê <a href=\"{details['website']}\">–°–∞–π—Ç</a>\n"
    if details["opening_hours"]:
        text += "\nüïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:\n" + "\n".join(details["opening_hours"])
    text += f"\n\n<a href=\"{details['maps_link']}\">üìç –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n\n"

    if not details["photo_url"]:
        text = "üì∑ –§–æ—Ç–æ –Ω–µ—Ç\n\n" + text

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{place_id}"))

    if suffix == "last":
        markup.add(
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="more_places"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
        )
    elif suffix == "final":
        markup.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
        )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if details["photo_url"]:
        bot.edit_message_media(
            media=InputMediaPhoto(media=details["photo_url"], caption=text, parse_mode="HTML"),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=markup
        )

