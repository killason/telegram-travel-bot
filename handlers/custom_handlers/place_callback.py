from loader import bot
from telebot.types import CallbackQuery
from utils.user_context import set_context
from services.places_service import get_place_details
from utils.place_output import send_places_chunk
from services.places_service import search_all_places
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import InputMediaPhoto
from services.history_service import (
    save_view_place,
    get_cached_places,
    set_cached_places,
    get_current_coords,
)
import logging


# ---------------------–û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ö–ê–¢–ï–ì–û–†–ò–ò –ú–ï–°–¢---------------------------
@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def handle_places(call: CallbackQuery):
    """ "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï–¥–∞" –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Å—Ç."""

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {call.data}")
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    place_type = call.data.split("category_", 1)[1]

    coords = get_current_coords(user_id)
    if not coords:
        bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –≥–æ—Ä–æ–¥ –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
        return
    _, lat, lon = coords
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat={lat}, lon={lon}, place_type={place_type}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    places = get_cached_places(user_id, place_type=place_type)
    if places is None:
        logging.info(
            f"–í –∫—ç—à–µ –Ω–µ—Ç –º–µ—Å—Ç –¥–ª—è user {user_id}, —Ç–∏–ø {place_type}. –ò—â–µ–º –∑–∞–Ω–æ–≤–æ."
        )
        places = search_all_places(lat=lat, lon=lon, place_type=place_type)
        if places:
            set_cached_places(user_id, places, place_type=place_type)
            logging.info(
                f"–ù–∞–π–¥–µ–Ω–æ {len(places)} –º–µ—Å—Ç –¥–ª—è user {user_id}, —Ç–∏–ø {place_type}. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à."
            )

    if not places:
        bot.send_message(chat_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º offset = 0
    set_context(user_id, offset=0)

    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
    send_places_chunk(
        chat_id=call.message.chat.id, user_id=user_id, place_type=place_type
    )


# ---------------------–û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "–ü–û–î–†–û–ë–ù–ï–ï"---------------------------
@bot.callback_query_handler(func=lambda call: call.data.startswith("details_"))
def handle_place_details(call: CallbackQuery):
    raw = call.data.split("details_")[1]
    try:
        place_id, suffix = raw.rsplit("_", 1)
    except ValueError:
        place_id = raw
        suffix = "mid"

    details = get_place_details(place_id)
    if not details:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    save_view_place(
        user_id=call.from_user.id,
        place_type=", ".join(details["types"]) if details.get("types") else None,
        name=details["name"],
        address=details["address"],
        link=details.get("maps_link") or "",
    )

    text = f"üìç <b>{details['name']}</b>\n"
    text += f"{details['address']}\n"
    text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {details['rating']}\n"
    if details["phone"]:
        text += f"üìû {details['phone']}\n"
    if details["website"]:
        text += f"üåê <a href=\"{details['website']}\">–°–∞–π—Ç</a>\n"
    if details["opening_hours"]:
        text += "\nüïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:\n" + "\n".join(details["opening_hours"])
    text += f"\n\n<a href=\"{details['maps_link']}\">üìç –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n\n"

    if not details["photo_url"]:
        text = "üì∑ –§–æ—Ç–æ –Ω–µ—Ç\n\n" + text

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{place_id}")
    )

    if suffix == "last":
        markup.add(
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="more_places"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"),
        )
    elif suffix == "final":
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories"))

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if details["photo_url"]:
        bot.edit_message_media(
            media=InputMediaPhoto(
                media=details["photo_url"], caption=text, parse_mode="HTML"
            ),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup,
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=markup,
        )
